Code is under GPLv3.  In addition, private single-person use need not
be made publicly available (as GPLv3), but any public use
(e.g. publications) requires that any new code be publicly and freely
available (e.g. at github) under the same license terms.  This is
maximally open-source and copyleft.

========================
Basic Instructions
========================

HARM as described in McKinney et al. (2012) in master. HARMRAD as described in McKinney et al. (2014) in koralinsert.

See koralinsert branch ./docs/quick_start_guide/* for tutorials on various aspects and utilities

See koralinsert branch ./docs/general_plotting_guide.txt for tutorial on data analysis

See http://pseudotensor.github.io/ for code help and graphical/interactive search and call graph from doxygen

========================
Very basic instructions:
========================

1) git clone ...

2) cd harm_harmgit/

3) Link initial and boundary conditions:

3a) default for master branch: ln -s initboundcode/init.fishmon.c init.c ; ln -s initboundcode/init.fishmon.h init.h ; ln -s initboundcode/bounds.fishmon.c bounds.c # for non-radiation problem

3b) default for koralinsert branch: ln -s initboundcode/init.koral.c init.c ; ln -s initboundcode/init.koral.h init.h ; ln -s initboundcode/bounds.koral.c bounds.c # for radiation problem

4) Compile:

make superclean ; make prep ; make -j 16

5) Run:

5a) default for master branch: mkdir run ; cd run ; cp ../grmhd . ; ./grmhd 1 1 1 1 # mpi and openmp both on

5b) default for koralinsert branch: mkdir run ; cd run ; cp ../grmhd . ; nohup mpirun -np 16 ./grmhd 4 4 1 & # mpi on but openmp off

========================
Lately-used Branch Details:
========================

koralinsert: Latest working (non-devel) for harmrad: b89a412aa9988dde020ebcba011d0b50af7548b2 .

koralinsert: Latest devel branch for harmrad: HEAD

master: Latest working (non-devel) for harm3d: HEAD

subedd: From non-devel harmrad, a setup for sub-Eddington type simulation.

superedd: From non-devel harmrad, a setup for super-Eddington type simulation.

========================
Common problems for master branch:
========================

1) By default, I've assumed the "mpicc" installation handles the
argument -cc, but some installations don't.  If your compiler doesn't
take -cc arguments, then your mpicc compiler probably only compiles
with "gcc" effectively.  Then in the file "makefile", you can set
USEMCCSWITCH=0 and USEMCCSWITCHFORGCC=0 (first instances of those two
variables just inside the USEMPI section).

2) If you have issues with OpenMP, set USEOPENMP=0 in makehead.inc .  Then when running master branch, do for 1 MPI task:

mkdir run ; cd run ; cp ../grmhd . ; nohup mpirun -np 1 ./grmhd 1 1 1 &

3) If you have issues with MPI but OpenMP is ok, then set USEMPI=0 in makehead.inc .  Then to run do for 16 cores on a node:

mkdir run ; cd run ; cp ../grmhd . ; ./grmhd 16 &

4) If you have issues with MPI and OpenMP, then set USEOPENMP=0 and USEMPI=0 in makehead.inc .  Then to run do:

mkdir run ; cd run ; cp ../grmhd . ; ./grmhd &

========================
Common problems for koralinsert branch:
========================

1) OpenMP not tested, so by default turned off.  Probably some minor
issues like static variables (e.g. in phys.tools.rad.c) need fixing
before would work properly.



 
